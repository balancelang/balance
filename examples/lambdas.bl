// Lambda which takes Int and returns Int
var lambda1 = (w: Int): Int -> {
    print(w)
    return w * 2
}

lambda1(5)


// Lambda with no arguments or return values
var lambda2 = () -> {
    print("This implicitly returns None")
}

lambda2()


// Lambda which takes a lambda (Int -> Int) and returns a lambda (Int -> None)
functionTakesLambda(x: Lambda<Int, Int>): Lambda<Int, None> {
    var q = x(5)
    return (x: Int) -> {
        print("Hello")
    }
}

var output = functionTakesLambda(lambda1)
output(5555)

// '(Int) -> Int' is same as Lambda<Int, Int>
functionTakesShorthandLambda(x: (Int) -> Int): Int {
    return x(7)
}

var output2 = functionTakesShorthandLambda((x: Int): Int -> {
    return x
})
print(output2)